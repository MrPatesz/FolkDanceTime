@page "/transactions"
@using Client
@using FolkDanceTime.Web.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject IItemClient ItemClient
@inject IItemTransactionClient ItemTransactionClient

<PageTitle>My Items and Transactions</PageTitle>

<MudText Typo="Typo.h4">My Items and Transactions</MudText>

<MudTabs
    Elevation="2"
    Rounded="true"
    ApplyEffectsToContainer="true"
    Style="@($"background:{Colors.DeepPurple.Lighten5};")"
>
    <MudTabPanel Text="My Items">
        @if (items == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <MudStack Spacing="2" Class="pa-1">
                @foreach (var item in items)
                {
                    <ItemListItem
                        Item="item"
                        OnHandOver="@OnHandOver"
                    />
                }
            </MudStack>
        }
    </MudTabPanel>
    <MudTabPanel Text="Outgoing Items">
        @if (outgoingItemTransactions == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <MudStack Spacing="2" Class="pa-1">
                @foreach (var transaction in outgoingItemTransactions)
                {
                    <TransactionListItem
                        Transaction="@transaction"
                        TransactionType="@Enums.TransactionType.Outgoing"
                        OnAccept="@OnAccept"
                        OnDecline="@OnDecline"
                        OnRevoke="@OnRevoke"
                    />
                }
            </MudStack>
        }
    </MudTabPanel>
    <MudTabPanel Text="Incoming Items">
        @if (incomingItemTransactions == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <MudStack Spacing="2" Class="pa-1">
                @foreach (var transaction in incomingItemTransactions)
                {
                    <TransactionListItem
                        Transaction="@transaction"
                        TransactionType="@Enums.TransactionType.Incoming"
                        OnAccept="@OnAccept"
                        OnDecline="@OnDecline"
                        OnRevoke="@OnRevoke"
                    />
                }
            </MudStack>
        }
    </MudTabPanel>
</MudTabs>

@code {
    private ICollection<ItemDto> items;
    private ICollection<ItemTransactionDto> incomingItemTransactions;
    private ICollection<ItemTransactionDto> outgoingItemTransactions;

    protected override async Task OnInitializedAsync()
    {
        items = await ItemClient.GetMyItemsAsync();
        incomingItemTransactions = await ItemTransactionClient.GetIncomingItemTransactionsAsync();
        outgoingItemTransactions = await ItemTransactionClient.GetOutgoingItemTransactionsAsync();
    }

    private void OnHandOver(ItemTransactionDto newTransaction)
    {
        outgoingItemTransactions.Add(newTransaction);
    }

    private async Task OnAccept(ItemTransactionDto transaction)
    {
        incomingItemTransactions.Remove(transaction);

        // TODO add item somehow without refetching
        items = await ItemClient.GetMyItemsAsync();
    }

    private void OnDecline(ItemTransactionDto transaction)
    {
        incomingItemTransactions.Remove(transaction);
    }

    private void OnRevoke(ItemTransactionDto transaction)
    {
        outgoingItemTransactions.Remove(transaction);
    }
}
