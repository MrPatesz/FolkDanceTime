@page "/transactions"
@using Client
@using FolkDanceTime.Web.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject IItemClient ItemClient
@inject IItemTransactionClient ItemTransactionClient

<PageTitle>My Items and Transactions</PageTitle>

<MudText Typo="Typo.h4">My Items and Transactions</MudText>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true">
    <MudTabPanel Text="My Items">
        @if (items == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <MudStack Spacing="2">
                @foreach (var item in items)
                {
                    <ItemListItem
                        Item="item"
                        OnHandOver="@OnHandOver"
                    />
                }
            </MudStack>
        }
    </MudTabPanel>
    <MudTabPanel Text="Outgoing Items">
        @if (outgoingItemTransactions == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <MudStack Spacing="2">
                @foreach (var transaction in outgoingItemTransactions)
                {
                    <MudField>
                        @transaction.ItemName
                    </MudField>
                    @*<TransactionListItem
                        Transaction="transaction"
                    />*@
                }
            </MudStack>
        }
    </MudTabPanel>
    <MudTabPanel Text="Incoming Items">
        @if (incomingItemTransactions == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <MudStack Spacing="2">
                @foreach (var transaction in incomingItemTransactions)
                {
                    <MudField>
                        @transaction.ItemName
                    </MudField>
                    @*<TransactionListItem
                        Transaction="transaction"
                    />*@
                }
            </MudStack>
        }
    </MudTabPanel>
</MudTabs>

@code {
    private ICollection<ItemDto> items;
    private ICollection<ItemTransactionDto> incomingItemTransactions;
    private ICollection<ItemTransactionDto> outgoingItemTransactions;

    protected override async Task OnInitializedAsync()
    {
        items = await ItemClient.GetMyItemsAsync();
        incomingItemTransactions = await ItemTransactionClient.GetIncomingItemTransactionsAsync();
        outgoingItemTransactions = await ItemTransactionClient.GetOutgoingItemTransactionsAsync();
    }

    private void OnHandOver(ItemTransactionDto newTransaction)
    {
        // var toMove = items.First(c => c.Id == id);

        // items.Remove(toMove); // TODO filter items that are in a transaction?
        outgoingItemTransactions.Add(newTransaction);
    }

    // OnRevoke outgoing

    // OnDecline incoming

    // OnAccept incoming
}
