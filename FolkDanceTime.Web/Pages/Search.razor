@page "/search-items"
@using Client
@using FolkDanceTime.Web.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject ISearchClient SearchClient
@inject IDialogService DialogService

<PageTitle>Search Items</PageTitle>

<MudStack>
    <MudText Typo="Typo.h4">Search Items</MudText>
    <MudStack Row Spacing="2">
        <MudTextField
            T="string"
            Label="Search for"
            InputType="InputType.Text"
            AutoFocus="true"
            Variant="Variant.Outlined"
            Margin="Margin.Dense"
            Value="@SearchTerm"
            ValueChanged="@OnTermChange"
        />
        <MudSelect
            T="SearchBy"
            Label="Search by"
            Variant="Variant.Outlined"
            Margin="Margin.Dense"
            Value="@searchBy"
            ValueChanged="@OnSearchByChange"
        >
            @foreach (SearchBy item in Enum.GetValues(typeof(SearchBy)))
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>
    </MudStack>

    <MudTable
        Striped="true"
        Items="@results" 
        Hover="true" 
        Breakpoint="Breakpoint.Sm"
        Loading="@(results == null)"
        LoadingProgressColor="Color.Primary"
        Style="@($"background:{Colors.DeepPurple.Lighten5};")"
    >
        <HeaderContent>
            <MudTh>Item</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Set</MudTh>
            <MudTh>Owner</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Item">@context.ItemName</MudTd>
            <MudTd DataLabel="Category">@context.Category.Name</MudTd>
            <MudTd DataLabel="Set">@context.ItemSet.Name</MudTd>
            <MudTd DataLabel="Owner">@context.OwnerUser.UserName</MudTd>
        </RowTemplate>
    </MudTable>
</MudStack>

@code {
    private ICollection<SearchResultDto> results;

    private string SearchTerm { get; set; }
    private SearchBy searchBy = SearchBy.All;

    protected override async Task OnInitializedAsync()
    {
        results = await SearchClient.SearchItemsAsync(SearchTerm, searchBy);
    }

    private async Task OnTermChange(string newTerm)
    {
        SearchTerm = newTerm;
        results = await SearchClient.SearchItemsAsync(SearchTerm, searchBy);
    }

    private async Task OnSearchByChange(SearchBy newSearchBy)
    {
        searchBy = newSearchBy;
        results = await SearchClient.SearchItemsAsync(SearchTerm, searchBy);
    }
}
