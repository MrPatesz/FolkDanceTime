@page "/items/{Id:int}"
@using Client
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject IItemClient ItemClient

<PageTitle>Item</PageTitle>

<MudStack Row Justify="Justify.SpaceBetween">
    <MudText Typo="Typo.h4">Item Details</MudText>
    @if(editing)
    {
        <div class="d-flex flex-row">
            <div class="flex-grow-1"/>
            <MudButtonGroup>
                <MudIconButton
                    Color="Color.Primary"
                    Icon="@Icons.Filled.Save"
                    OnClick="@Confirm"
                />
                <MudIconButton
                    Color="Color.Default"
                    Icon="@Icons.Filled.Cancel"
                    OnClick="@Cancel"
                />
            </MudButtonGroup>
        </div>
    }
    else
    {
        <MudIconButton
            Color="Color.Primary"
            Icon="@Icons.Filled.Edit"
            OnClick="@StartEditing"
        />
    }
</MudStack>

@if (item == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if(editing)
    {
        <MudStack Spacing="2">
            <MudTextField
                Label="Name"
                InputType="InputType.Text"
                AutoFocus="true"
                Variant="Variant.Outlined"
                @bind-Value="@item.Name"
            />
            <MudTextField
                Label="Description"
                InputType="InputType.Text"
                Variant="Variant.Outlined"
                @bind-Value="@item.Description"
            />
            <InputFile id="fileInput" OnChange="SelectImage" hidden accept=".jpg, .jpeg, .png" />
            <MudButton
                HtmlTag="label"
                Variant="Variant.Filled"
                Color="Color.Primary"
                StartIcon="@Icons.Filled.Image"
                for="fileInput"
            >
                Select Image
            </MudButton>
            @foreach(var property in item.Properties)
            {
                <MudTextField
                    Label="@property.Name"
                    Variant="Variant.Outlined"
                    InputType="InputType.Text"
                    @bind-Value="@property.Value"
                />
            }
        </MudStack>
    }
    else
    {
        <MudStack Row Spacing="2">
            <MudImage
                ObjectFit="ObjectFit.Contain"
                Height="200"
                Width="200"
                Src="@item.PictureFilename"
                Elevation="25"
                Class="rounded-lg"
            />
            <MudStack Spacing="2" Class="w-100">
                <MudText>
                    @item.Name
                </MudText>
                <MudText>
                    @item.Description
                </MudText>
            </MudStack>
        </MudStack>
        <MudStack Spacing="2">
            @foreach(var property in item.Properties)
            {
                <MudField Label="@property.Name">
                    @property.Value
                </MudField>
            }
        </MudStack>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    private ItemDto item;

    private List<PropertyValueDto> currentProperties;

    private bool editing = false;

    private IBrowserFile selectedImage;

    protected override async Task OnInitializedAsync()
    {
        item = await ItemClient.GetItemAsync(Id);
    }

    protected void StartEditing()
    {
        currentProperties = item.Properties.Select(p => 
            new PropertyValueDto
            {
                PropertyId = p.PropertyId,
                PropertyValueId = p.PropertyValueId,
                Name = p.Name,
                Value = p.Value,
            }
        ).ToList();

        editing = true;
    }

    private void SelectImage(InputFileChangeEventArgs e)
    {
        selectedImage = e.File;
    }

    protected void Cancel()
    {
        item.Properties = currentProperties;
        editing = false;
        // TODO also save name and description
    }

    protected async Task Confirm()
    {
        if (item.Name == "") return;

        try
        {
            var editedItem = await ItemClient.EditItemAsync(item, Id.ToString());
            item = editedItem;
        }
        catch (Exception e)
        {
            // TODO toast message: name must be unique
            item.Properties = currentProperties;
        }
        finally
        {
            editing = false;
        }
    }
}
