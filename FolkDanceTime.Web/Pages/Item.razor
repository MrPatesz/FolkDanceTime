@page "/items/{Id:int}"
@using Client
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.IO
@using Tewr.Blazor.FileReader
@attribute [Authorize]
@inject HttpClient client;
@inject IFileReaderService FileReader
@inject IItemClient ItemClient

<PageTitle>Item</PageTitle>

<MudStack Row Justify="Justify.SpaceBetween">
    <MudText Typo="Typo.h4">Item Details</MudText>
    @if(editing)
    {
        <MudStack Row Justify="Justify.FlexEnd">
            <MudButtonGroup>
                <MudIconButton
                    Color="Color.Primary"
                    Icon="@Icons.Filled.Save"
                    OnClick="@Confirm"
                />
                <MudIconButton
                    Color="Color.Default"
                    Icon="@Icons.Filled.Cancel"
                    OnClick="@Cancel"
                />
            </MudButtonGroup>
        </MudStack>
    }
    else
    {
        <MudIconButton
            Color="Color.Primary"
            Icon="@Icons.Filled.Edit"
            OnClick="@StartEditing"
        />
    }
</MudStack>

@if (item == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if(editing)
    {
        <MudStack Spacing="2">
            <MudTextField
                Label="Name"
                InputType="InputType.Text"
                AutoFocus="true"
                Variant="Variant.Outlined"
                @bind-Value="@item.Name"
            />
            <MudTextField
                Label="Description"
                InputType="InputType.Text"
                Variant="Variant.Outlined"
                @bind-Value="@item.Description"
            />
            <input
                id="fileInput"
                type="file"
                hidden
                accept=".jpg, .jpeg, .png"
                @ref="inputReference"
                @onchange="@UploadPicture"
            />
            <MudButton
                HtmlTag="label"
                Variant="Variant.Filled"
                Color="Color.Primary"
                StartIcon="@Icons.Filled.Image"
                for="fileInput"
            >
                Select Image
            </MudButton>
            @foreach(var property in item.Properties)
            {
                <MudTextField
                    Label="@property.Name"
                    Variant="Variant.Outlined"
                    InputType="InputType.Text"
                    @bind-Value="@property.Value"
                />
            }
        </MudStack>
    }
    else
    {
        <MudStack Row Spacing="2">
            <MudImage
                ObjectFit="ObjectFit.Contain"
                Height="200"
                Width="200"
                Src="@item.PictureFilename"
                Elevation="25"
                Class="rounded-lg"
            />
            <MudStack Spacing="2" Class="w-100">
                <MudText Typo="Typo.h5">
                    @item.Name
                </MudText>
                <MudText>
                    @item.Description
                </MudText>
            </MudStack>
        </MudStack>
        <MudStack Spacing="2">
            @foreach(var property in item.Properties)
            {
                <MudField Label="@property.Name">
                    @property.Value
                </MudField>
            }
        </MudStack>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    private ItemDto item;
    private ItemDto currentItem;
    private bool editing = false;

    private ElementReference inputReference;

    private async Task UploadPicture()
    {
        var file = (await FileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();
        if (file == null) {
            return;
        }
        var fileInfo=await file.ReadFileInfoAsync();
        Stream fileStream;

        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size)) {
            fileStream = new MemoryStream(ms.ToArray());
        }

        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
        var sc = new StreamContent(fileStream, (int)fileStream.Length);
        content.Add(sc, "image", fileInfo.Name);

        var response = await client.PostAsync("api/Item/PostPicture", content);
        item.PictureFilename = await response.Content.ReadAsStringAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        item = await ItemClient.GetItemAsync(Id);
    }

    protected void StartEditing()
    {
        currentItem = new ItemDto();
        currentItem.Id = item.Id;
        currentItem.Name = item.Name;
        currentItem.Description = item.Description;
        currentItem.PictureFilename = item.PictureFilename;
        currentItem.Properties = item.Properties.Select(p => 
            new PropertyValueDto
            {
                PropertyId = p.PropertyId,
                PropertyValueId = p.PropertyValueId,
                Name = p.Name,
                Value = p.Value,
            }
        ).ToList();

        editing = true;
    }

    protected async Task Cancel()
    {
        if(item.PictureFilename != currentItem.PictureFilename)
        {
            await client.DeleteAsync($"api/Item/DeletePicture?fileName={item.PictureFilename}");
        }
        item = currentItem;
        editing = false;
    }

    protected async Task Confirm()
    {
        if (item.Name == "") return;

        try
        {
            var editedItem = await ItemClient.EditItemAsync(item, Id.ToString());
            item = editedItem;
        }
        catch (Exception e)
        {
            // TODO toast message: name must be unique
            item = currentItem;
        }
        finally
        {
            editing = false;
        }
    }
}
