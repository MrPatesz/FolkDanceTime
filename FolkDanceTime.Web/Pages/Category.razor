@page "/categories/{Id:int}"
@using Client
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject ICategoryClient CategoryClient

<PageTitle>Category</PageTitle>

<div class="d-flex flex-row justify-content-between">
    <MudText Typo="Typo.h4">Category Details</MudText>
    @if(editing)
    {
        <MudButtonGroup>
            <MudIconButton
                Color="Color.Primary"
                Icon="@Icons.Filled.Save"
                @onclick="@Confirm"
            />
            <MudIconButton
                Color="Color.Default"
                Icon="@Icons.Filled.Cancel"
                @onclick="@Cancel"
            />
        </MudButtonGroup>
    }
    else
    {
        <MudIconButton
            Color="Color.Primary"
            Icon="@Icons.Filled.Edit"
            @onclick="@StartEditing"
        />
    }
</div>

@if (category == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if(editing)
    {
        <MudStack Spacing="2">
            <MudTextField
                Label="Name"
                InputType="InputType.Text"
                AutoFocus="true"
                Variant="Variant.Outlined"
                @bind-Value="@category.Name"
            />
            @foreach(var property in category.Properties)
            {
                <MudStack Row Spacing="1">
                    <MudTextField
                        Label="@currentProperties.FirstOrDefault(p => p.Id == property.Id)?.Name"
                        Variant="Variant.Outlined"
                        InputType="InputType.Text"
                        @bind-Value="@property.Name"
                    />
                    <MudIconButton
                        Color="Color.Error"
                        Icon="@Icons.Filled.RemoveCircle"
                        OnClick="@(()=>DeleteProperty(property))"
                    />
                </MudStack>
            }
            <div class="d-flex flex-row">
                <div class="flex-grow-1"/>
                <MudButton
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    StartIcon="@Icons.Filled.AddCircle"
                    OnClick="@AddProperty"
                >
                    Add Property
                </MudButton>
            </div>
        </MudStack>
    }
    else
    {
        <MudStack Spacing="2">
            <MudField>
                @category.Name
            </MudField>
            @foreach(var property in category.Properties)
            {
                <MudField>
                    @property.Name
                </MudField>
            }
        </MudStack>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    private CategoryDto category;

    private List<PropertyDto> currentProperties;

    private bool editing = false;

    protected override async Task OnInitializedAsync()
    {
        category = await CategoryClient.GetCategoryAsync(Id);
    }

    protected void DeleteProperty(PropertyDto property)
    {
        category.Properties = category.Properties
            .Where(p => p.Id != property.Id || p.Name != property.Name)
            .ToHashSet();

        // TODO confirm dialog for property deletion: it will delete all values too
    }

    protected void AddProperty()
    {
        category.Properties.Add(new PropertyDto { Name = "" });
    }

    protected void StartEditing()
    {
        currentProperties = new List<PropertyDto>();
        category.Properties.ToList().ForEach(p => currentProperties.Add(new PropertyDto { Id = p.Id, Name = p.Name }));
        editing = true;
    }

    protected void Cancel()
    {
        category.Properties = currentProperties;
        editing = false;
        // TODO also save name
    }

    protected async Task Confirm()
    {
        if (category.Name == "" || category.Properties.Any(p => p.Name == "")) return;

        try
        {
            var editedCategory = await CategoryClient.EditCategoryAsync(category, Id.ToString());
            category = editedCategory;
        }
        catch (Exception e)
        {
            // TODO toast message: name must be unique
            category.Properties = currentProperties;
        }
        finally
        {
            editing = false;
        }
    }
}
