@page "/item-sets"
@using Client
@using FolkDanceTime.Web.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject IItemSetClient ItemSetClient
@inject IDialogService DialogService

<PageTitle>Item Sets</PageTitle>

<MudStack>
    <MudStack Row Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h4">Item Sets</MudText>
        <MudIconButton
            Color="Color.Primary"
            Icon="@Icons.Filled.AddCircle"
            OnClick="@OpenDialog"
        />
    </MudStack>

    @if (itemSets == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <MudStack>
            @foreach (var itemSet in itemSets)
            {
                <ItemSetListView
                    ItemSet="itemSet"
                    OnDelete="@OnDelete"
                />
            }
        </MudStack>
    }
</MudStack>

@code {
    private ICollection<ItemSetDto> itemSets;

    protected override async Task OnInitializedAsync()
    {
        itemSets = await ItemSetClient.GetItemSetsAsync();
    }

    protected void OnDelete(ItemSetDto itemSet)
    {
        itemSets.Remove(itemSet);
    }

    private async void OpenDialog()
    {
        var itemsInSets = itemSets.SelectMany(set => set.Items).ToList();

        var parameters = new DialogParameters();
        parameters.Add("ItemsInSets", itemsInSets);

        var dialog = DialogService.Show<AddItemSetDialog>("Create Item Set", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            itemSets.Add((ItemSetDto)result.Data);
            StateHasChanged();
        }
    }
}