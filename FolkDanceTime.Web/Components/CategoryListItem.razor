@using Client
@inject NavigationManager NavigationManager
@inject ICategoryClient CategoryClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper
    Class="cursor-pointer"
    @onclick="@NavigateToDetails"
    Style="@($"background:{Colors.DeepPurple.Lighten4};")"
>
    <MudStack
        Row
        Justify="Justify.SpaceBetween"
        AlignItems="AlignItems.Center"
    >
        <MudText Class="px-3">
            @Category.Name
        </MudText>
        <MudIconButton
            Color="Color.Error"
            Icon="@Icons.Filled.RemoveCircle"
            OnClick="@DeleteCategory"
        />
    </MudStack>
</MudPaper>

@code {
    [Parameter]
    public CategoryDto Category { get; set; }
    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    protected async Task DeleteCategory()
    {
        bool? result = await DialogService.ShowMessageBox(
            $"Deleting Category: '{Category.Name}'", 
            "Are you sure you want to delete this category?", 
            yesText:"Delete", cancelText:"Cancel");

        if(result == null) return;

        try
        {
            await CategoryClient.DeleteCategoryAsync(Category.Id);
            await OnDelete.InvokeAsync(Category.Id);
        }
        catch (Exception)
        {
            Snackbar.Add("There are items in this category!", Severity.Error);
        }
    }

    protected void NavigateToDetails()
    {
         NavigationManager.NavigateTo($"categories/{Category.Id}");
    }
}
