@using Client
@using Tewr.Blazor.FileReader
@inject HttpClient client
@inject IFileReaderService FileReader
@inject IItemClient ItemClient
@inject ICategoryClient CategoryClient

<MudDialog>
    <DialogContent>
        <MudStack Spacing="2">
            @if(categories == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <MudSelect
                    T="CategoryDto"
                    Label="Category"
                    Variant="Variant.Outlined"
                    Margin="Margin.Dense"
                    AutoFocus="true"
                    Value="@selectedCategory"
                    ValueChanged="@OnCategorySelect"
                >
                    @foreach(var category in categories)
                    {
                        <MudSelectItem Value="@category">
                            @category.Name
                        </MudSelectItem>
                    }
                </MudSelect>
            }
            <MudTextField
                InputType="InputType.Text"
                Label="Name"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                @bind-Value="@newItem.Name"
            />
            <MudTextField
                InputType="InputType.Text"
                Label="Description"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                @bind-Value="@newItem.Description"
            />
            <input
                id="fileInput"
                type="file"
                hidden
                accept=".jpg, .jpeg, .png"
                @ref="inputReference"
                @onchange="@UploadPicture"
            />
            <MudButton
                HtmlTag="label"
                Variant="Variant.Filled"
                Color="Color.Primary"
                StartIcon="@Icons.Filled.Image"
                for="fileInput"
            >
                Select Image
            </MudButton>
            @if(selectedCategory != null)
            {
                @foreach(var property in selectedCategory.Properties)
                {
                    <MudTextField
                        InputType="InputType.Text"
                        Label="@property.Name"
                        Variant="Variant.Outlined"
                        Margin="Margin.Dense"
                        T="string"
                        @bind-Value="@newItem.Properties.First(p => p.PropertyId == property.Id).Value"
                    />
                }
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private ICollection<CategoryDto> categories;
    private ItemDto newItem = new ItemDto{ Name = "" };
    private CategoryDto selectedCategory;

    private ElementReference inputReference;

    private async Task UploadPicture()
    {
        try
        {
            var file = (await FileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();
            if (file == null) {
                return;
            }
            var fileInfo=await file.ReadFileInfoAsync();
            Stream fileStream;

            using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size)) {
                fileStream = new MemoryStream(ms.ToArray());
            }

            var content = new MultipartFormDataContent();
            content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
            var sc = new StreamContent(fileStream, (int)fileStream.Length);
            content.Add(sc, "image", fileInfo.Name);

            if(newItem.PictureFilename != "")
            {
                await client.DeleteAsync($"api/Item/DeletePicture?fileName={newItem.PictureFilename}");
            }

            var response = await client.PostAsync("api/Item/PostPicture", content);
            newItem.PictureFilename = await response.Content.ReadAsStringAsync();
        } 
        catch(Exception e)
        {
            // TODO picture is too large!
        }
    }

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryClient.GetCategoriesAsync();
    }

    private async void Submit()
    {
        if(selectedCategory != null && newItem.Name != "")
        {
            try
            {
                // TODO upload image
                var addedItem = await ItemClient.AddItemAsync(newItem, selectedCategory.Id);
                MudDialog.Close(DialogResult.Ok(addedItem));
            }
            catch(Exception e)
            {
                // TODO toast message
                MudDialog.Cancel();
            }
        }
    }

    private async Task Cancel()
    {
        if(newItem.PictureFilename != null)
        {
            await client.DeleteAsync($"api/Item/DeletePicture?fileName={newItem.PictureFilename}");
        }
        MudDialog.Cancel();
    }

    private void OnCategorySelect(CategoryDto newlySelected)
    {
        selectedCategory = newlySelected;

        newItem.Properties = newlySelected.Properties.Select(p =>
            new PropertyValueDto
            {
                PropertyId = p.Id,
                Name = p.Name,
                Value = "",
            }
        ).ToHashSet();
    }
}