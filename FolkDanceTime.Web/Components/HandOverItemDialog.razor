@using Client
@inject IItemTransactionClient ItemTransactionClient
@inject IItemSetTransactionClient ItemSetTransactionClient
@inject IUserClient UserClient
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        @if(users == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <MudSelect
                T="UserDto"
                Label="Hand Over To"
                Variant="Variant.Outlined"
                Margin="Margin.Dense"
                AutoFocus="true"
                @bind-Value="@selectedUser"
            >
                    @foreach(var user in users)
                    {
                        <MudSelectItem Value="@user">
                            @user.UserName
                        </MudSelectItem>
                    }
                </MudSelect>
            }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public ItemDto Item { get; set; }
    [Parameter] public ItemSetDto ItemSet { get; set; }

    private ICollection<UserDto> users;
    private UserDto selectedUser;

    protected override async Task OnInitializedAsync()
    {
        if(Item == null && ItemSet == null)
        {
            MudDialog.Cancel();
        }
        users = await UserClient.GetOtherUsersAsync();
    }

    private async void Submit()
    {
        if(selectedUser != null)
        {
            try
            {
                if(ItemSet == null && Item != null)
                {
                    var itemTransaction = await ItemTransactionClient.CreateItemTransactionAsync(Item.Id, selectedUser.Id);
                    MudDialog.Close(DialogResult.Ok(itemTransaction));
                }
                else if(Item == null && ItemSet != null)
                {
                    var itemSetTransaction = await ItemSetTransactionClient.CreateItemSetTransactionAsync(ItemSet.Id, selectedUser.Id);
                    MudDialog.Close(DialogResult.Ok(itemSetTransaction));
                    throw new Exception();
                }
            }
            catch(Exception e)
            {
                if(ItemSet == null && Item != null)
                {
                    Snackbar.Add("Item is already in a pending transaction!", Severity.Error);
                }
                else if(Item == null && ItemSet != null)
                {
                    Snackbar.Add("Item set is already in a pending transaction!", Severity.Error);
                }
                MudDialog.Cancel();
            }
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}