@using Client
@inject ICategoryClient CategoryClient

<MudPaper
    Class="d-flex align-center"
    Style="@($"background:{Colors.DeepPurple.Lighten3};")"
>
    <MudTextField
        InputType="InputType.Text"
        Placeholder="Name"
        AutoFocus="true"
        Variant="Variant.Outlined"
        Margin="Margin.Dense"
        @bind-Value="@newCategory.Name"
    />
    <MudButtonGroup>
        <MudIconButton
            Color="Color.Primary"
            Icon="@Icons.Filled.CheckCircle"
            OnClick="@Confirm"
        />
        <MudIconButton
            Color="Color.Default"
            Icon="@Icons.Filled.Cancel"
            OnClick="@OnClose"
        />
    </MudButtonGroup>
</MudPaper>

@code {
    [Parameter]
    public EventCallback OnClose { get; set; }
    [Parameter]
    public EventCallback<CategoryDto> OnAdd { get; set; }

    private CategoryDto newCategory = new CategoryDto{ Name = "" };

    protected async Task Confirm()
    {
        if (newCategory.Name == "") return;

        try
        {
            var createdCategory = await CategoryClient.AddCategoryAsync(newCategory);
            await OnAdd.InvokeAsync(createdCategory);
        }
        catch (Exception e)
        {
            // TODO toast message: name must be unique
        }
        finally
        {
            await OnClose.InvokeAsync();
        }
    }
}
